{"version":3,"sources":["logo.svg","components/ImageBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ImageBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","columnStart","index","setState","colors","randomColor","Math","floor","random","length","setColumnStart","style","backgroundImage","concat","image","imageUrl","backgroundColor","bigBox","gridRow","gridColumn","react_default","a","createElement","className","onClick","toggleBig","bind","Component","App","images","bigTop","bigBottom","assertThisInitialized","_this2","fetch","then","res","json","_this3","map","components_ImageBox","key","name","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.140f9078.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass ImageBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: '',\n      columnStart: '',\n    }\n  }\n\n  setColumnStart() {\n    if(this.props.index === 0 || this.props.index === 5 || this.props.index === 9 || this.props.index === 14) {\n      this.setState({columnStart: 1})\n    } else if (this.props.index === 1 || this.props.index === 6 || this.props.index === 10 || this.props.index === 15) {\n      this.setState({columnStart: 2})\n    } else if (this.props.index === 2 || this.props.index === 7 || this.props.index === 11 || this.props.index === 16) {\n      this.setState({columnStart: 3})\n    } else if (this.props.index === 3 || this.props.index === 12) {\n      this.setState({columnStart: 4})\n    } else {\n      this.setState({columnStart: 5})\n    }\n  }\n\n  componentDidMount() {\n    const colors = ['magenta', 'blue', 'yellow', 'green', 'turquoise'];\n    let randomColor = colors[Math.floor(Math.random()*colors.length)];\n    this.setState({color: randomColor});\n    this.setColumnStart();\n  }\n\n  render() {\n    let style = {\n      backgroundImage: `url(${this.props.image.imageUrl})`,\n\n      backgroundColor: (this.props.bigBox === this.props.index) ? `${this.state.color}` : '#eee',\n\n      gridRow: (this.props.bigBox === this.props.index) && (this.props.index<9) ? '1 / span 2' : (this.props.bigBox === this.props.index) && (this.props.index>8) ? '3 / span 2' : 'auto',\n\n      gridColumn: (this.props.bigBox === this.props.index) ? `${this.state.columnStart} / span 2` : 'auto',\n    }\n    return (\n      <div className={`box ${this.props.bigBox ? 'bigBox' : ''}`} style={style} onClick={this.props.toggleBig.bind(this, this.props.index)}></div>\n    );\n  }\n}\n\nexport default ImageBox;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport ImageBox from './components/ImageBox.js';\nimport './App.css';\nimport './styles/boxes.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      images: [],\n      bigTop: 2,\n      bigBottom: 9,\n    }\n    this.toggleBig = this.toggleBig.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://fathomless-reaches-65003.herokuapp.com/')\n      .then(res => res.json())\n      .then(images => this.setState({ images }));\n  }\n\n  toggleBig(index) {\n    if(index<9){\n      this.setState({bigTop: index})\n    } else {\n      this.setState({bigBottom: index})\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"boxContainer\">\n          {this.state.images.map((image, index) =>\n            <ImageBox key={image.name} image={image} index={index} toggleBig={this.toggleBig} bigBox={(index<9) ? this.state.bigTop : this.state.bigBottom}/>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}